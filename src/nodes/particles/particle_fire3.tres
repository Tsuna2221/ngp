[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://b2ofla32si42e"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lhg5r"]
expanded_output_ports = [0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hx2h6"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_2u2uy"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeBillboard" id="VisualShaderNodeBillboard_t06vn"]
keep_scale = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
	mat4 n_out2p0;
// GetBillboardMatrix:2
	{
		mat4 __mvm = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
		__mvm = __mvm * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		n_out2p0 = __mvm;
	}


// Output:0
	MODELVIEW_MATRIX = n_out2p0;


}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, n_out3p0);
	float n_out2p1 = n_out2p0.r;


// VectorDecompose:4
	float n_out4p0 = vec4(n_out2p1).x;
	float n_out4p1 = vec4(n_out2p1).y;
	float n_out4p2 = vec4(n_out2p1).z;
	float n_out4p3 = vec4(n_out2p1).w;


// Output:0
	ALBEDO = vec3(n_out4p0);


}
"
graph_offset = Vector2(-298.087, -9.31706)
nodes/vertex/2/node = SubResource("VisualShaderNodeBillboard_t06vn")
nodes/vertex/2/position = Vector2(-100, 140)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 10)
nodes/fragment/0/position = Vector2(560, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_lhg5r")
nodes/fragment/2/position = Vector2(-40, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_hx2h6")
nodes/fragment/3/position = Vector2(-320, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorDecompose_2u2uy")
nodes/fragment/4/position = Vector2(260, 100)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 0, 0, 2, 1, 4, 0)
